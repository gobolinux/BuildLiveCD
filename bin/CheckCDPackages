#!/bin/bash

datadir="/Programs/BuildLiveCD/Current/Data"
packagedir="./Packages"

if [ ! -d "$packagedir" ]
then
   echo "Could not find \"$packagedir\" directory."
   echo "Please run this script in the root of the live cd development environment."
   exit 1
fi


for i in $datadir/Packages-List-*; do
   [ "$i" = "$datadir/Packages-List-GoboLinuxTools-Git" ] && continue
   # Skip comments
   cat $i | cut -f1 -d' ' | grep -v "^#" | sort -u | while read packagename;
   do
      [ "$packagename" ] || continue

      pkg=`ls $packagedir/${packagename}--* 2> /dev/null`
      if [ -z "$pkg" ]
      then
         echo -e "\n# ERROR: Package $packagename ($i) could not be filled."
         newest=`FindPackage  -t o "$packagename" 2> /dev/null`
         newest=`basename "$newest"`
         echo "ln -sfn ../official/$newest ./"
         continue
      fi
      
      pkgs=`ls $packagedir/${packagename}--*`
      if [ `echo "$pkgs" | wc -w 2> /dev/null` -gt 1 ]
      then
         echo -e "\n# ERROR: More than one version for $packagename available."
         latest=`GuessLatest $pkgs`
         for i in $pkgs
         do
            [ "$i" = "$latest" ] || echo "rm -f $i"
         done
      fi
   done
done


for pkg in $packagedir/*.tar.bz2
do
   basepkg=`basename $pkg`
   packagename=`echo $basepkg | sed 's/\(.*\)--.*--.*\.tar.bz2/\1/'`
   if ! grep --quiet -w "^$packagename" $datadir/Packages-List-*
   then
      echo -e "\n# WARNING: Package $pkg is not required."
      echo "rm -f $basepkg"
   fi
done

ShowPackages --local-dirs=$packagedir local_package -lt official_package 2> /dev/null | while read line
do
   packagename=`echo $line | cut -f1 -d' '`
   version_local=`echo $line | cut -f2 -d' '`
   version_remote=`echo $line | cut -f4 -d' '`

   echo -e "\n# WARNING: $version_local is not the newest package for $packagename."
   echo ln -sfn ../official/$packagename--$version_remote--i686.tar.bz2 ./
   echo rm $packagename--$version_local--i686.tar.bz2
done

# alternative implementation, which does not relly on ShowPackages
# for pkg in $packagedir/*.tar.bz2
# do
#    basepkg=`basename $pkg`
#    packagename=`echo $basepkg | sed 's/\(.*\)--.*--.*\.tar.bz2/\1/'`
#    newest=`FindPackage  -t o "$packagename" 2> /dev/null`
#    newest=`basename "$newest"`
# 
#    if [ ! "$newest" = "$basepkg" ]
#    then
#       echo "# WARNING: $basepkg is not the newest package for $packagename."
#       echo ln -sfn ../official/$newest ./
#       echo rm $basepkg
#    fi
# done
